

Microchip MPLAB XC8 Assembler V2.40 build 20220703182018 
                                                                                               Wed Oct 12 23:53:50 2022

Microchip MPLAB XC8 C Compiler v2.40 (Free license) build 20220703182018 Og1 
     1                           	processor	16F877A
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	idataCOMMON,global,class=CODE,delta=2,noexec
     5                           	psect	strings,global,class=STRING,delta=2,noexec
     6                           	psect	cinit,global,class=CODE,merge=1,delta=2
     7                           	psect	dataCOMMON,global,class=COMMON,space=1,delta=1,noexec
     8                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
     9                           	psect	maintext,global,class=CODE,split=1,delta=2
    10                           	psect	text1,local,class=CODE,merge=1,delta=2
    11                           	psect	text2,local,class=CODE,merge=1,delta=2
    12                           	psect	text3,local,class=CODE,merge=1,delta=2
    13                           	psect	text4,local,class=CODE,merge=1,delta=2
    14                           	psect	text5,local,class=CODE,merge=1,delta=2
    15                           	psect	text6,local,class=CODE,merge=1,delta=2
    16                           	psect	text7,local,class=CODE,merge=1,delta=2
    17                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    18                           	dabs	1,0x7E,2
    19     0000                     
    20                           ; Version 2.20
    21                           ; Generated 12/02/2020 GMT
    22                           ; 
    23                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
    24                           ; All rights reserved.
    25                           ; 
    26                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    27                           ; 
    28                           ; Redistribution and use in source and binary forms, with or without modification, are
    29                           ; permitted provided that the following conditions are met:
    30                           ; 
    31                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    32                           ;        conditions and the following disclaimer.
    33                           ; 
    34                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    35                           ;        of conditions and the following disclaimer in the documentation and/or other
    36                           ;        materials provided with the distribution.
    37                           ; 
    38                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    39                           ;        software without specific prior written permission.
    40                           ; 
    41                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    42                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    43                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    44                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    45                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    46                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    47                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    48                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    49                           ; 
    50                           ; 
    51                           ; Code-generator required, PIC16F877A Definitions
    52                           ; 
    53                           ; SFR Addresses
    54     0000                     	;# 
    55     0001                     	;# 
    56     0002                     	;# 
    57     0003                     	;# 
    58     0004                     	;# 
    59     0005                     	;# 
    60     0006                     	;# 
    61     0007                     	;# 
    62     0008                     	;# 
    63     0009                     	;# 
    64     000A                     	;# 
    65     000B                     	;# 
    66     000C                     	;# 
    67     000D                     	;# 
    68     000E                     	;# 
    69     000E                     	;# 
    70     000F                     	;# 
    71     0010                     	;# 
    72     0011                     	;# 
    73     0012                     	;# 
    74     0013                     	;# 
    75     0014                     	;# 
    76     0015                     	;# 
    77     0015                     	;# 
    78     0016                     	;# 
    79     0017                     	;# 
    80     0018                     	;# 
    81     0019                     	;# 
    82     001A                     	;# 
    83     001B                     	;# 
    84     001B                     	;# 
    85     001C                     	;# 
    86     001D                     	;# 
    87     001E                     	;# 
    88     001F                     	;# 
    89     0081                     	;# 
    90     0085                     	;# 
    91     0086                     	;# 
    92     0087                     	;# 
    93     0088                     	;# 
    94     0089                     	;# 
    95     008C                     	;# 
    96     008D                     	;# 
    97     008E                     	;# 
    98     0091                     	;# 
    99     0092                     	;# 
   100     0093                     	;# 
   101     0094                     	;# 
   102     0098                     	;# 
   103     0099                     	;# 
   104     009C                     	;# 
   105     009D                     	;# 
   106     009E                     	;# 
   107     009F                     	;# 
   108     010C                     	;# 
   109     010D                     	;# 
   110     010E                     	;# 
   111     010F                     	;# 
   112     018C                     	;# 
   113     018D                     	;# 
   114     0000                     	;# 
   115     0001                     	;# 
   116     0002                     	;# 
   117     0003                     	;# 
   118     0004                     	;# 
   119     0005                     	;# 
   120     0006                     	;# 
   121     0007                     	;# 
   122     0008                     	;# 
   123     0009                     	;# 
   124     000A                     	;# 
   125     000B                     	;# 
   126     000C                     	;# 
   127     000D                     	;# 
   128     000E                     	;# 
   129     000E                     	;# 
   130     000F                     	;# 
   131     0010                     	;# 
   132     0011                     	;# 
   133     0012                     	;# 
   134     0013                     	;# 
   135     0014                     	;# 
   136     0015                     	;# 
   137     0015                     	;# 
   138     0016                     	;# 
   139     0017                     	;# 
   140     0018                     	;# 
   141     0019                     	;# 
   142     001A                     	;# 
   143     001B                     	;# 
   144     001B                     	;# 
   145     001C                     	;# 
   146     001D                     	;# 
   147     001E                     	;# 
   148     001F                     	;# 
   149     0081                     	;# 
   150     0085                     	;# 
   151     0086                     	;# 
   152     0087                     	;# 
   153     0088                     	;# 
   154     0089                     	;# 
   155     008C                     	;# 
   156     008D                     	;# 
   157     008E                     	;# 
   158     0091                     	;# 
   159     0092                     	;# 
   160     0093                     	;# 
   161     0094                     	;# 
   162     0098                     	;# 
   163     0099                     	;# 
   164     009C                     	;# 
   165     009D                     	;# 
   166     009E                     	;# 
   167     009F                     	;# 
   168     010C                     	;# 
   169     010D                     	;# 
   170     010E                     	;# 
   171     010F                     	;# 
   172     018C                     	;# 
   173     018D                     	;# 
   174     0000                     	;# 
   175     0001                     	;# 
   176     0002                     	;# 
   177     0003                     	;# 
   178     0004                     	;# 
   179     0005                     	;# 
   180     0006                     	;# 
   181     0007                     	;# 
   182     0008                     	;# 
   183     0009                     	;# 
   184     000A                     	;# 
   185     000B                     	;# 
   186     000C                     	;# 
   187     000D                     	;# 
   188     000E                     	;# 
   189     000E                     	;# 
   190     000F                     	;# 
   191     0010                     	;# 
   192     0011                     	;# 
   193     0012                     	;# 
   194     0013                     	;# 
   195     0014                     	;# 
   196     0015                     	;# 
   197     0015                     	;# 
   198     0016                     	;# 
   199     0017                     	;# 
   200     0018                     	;# 
   201     0019                     	;# 
   202     001A                     	;# 
   203     001B                     	;# 
   204     001B                     	;# 
   205     001C                     	;# 
   206     001D                     	;# 
   207     001E                     	;# 
   208     001F                     	;# 
   209     0081                     	;# 
   210     0085                     	;# 
   211     0086                     	;# 
   212     0087                     	;# 
   213     0088                     	;# 
   214     0089                     	;# 
   215     008C                     	;# 
   216     008D                     	;# 
   217     008E                     	;# 
   218     0091                     	;# 
   219     0092                     	;# 
   220     0093                     	;# 
   221     0094                     	;# 
   222     0098                     	;# 
   223     0099                     	;# 
   224     009C                     	;# 
   225     009D                     	;# 
   226     009E                     	;# 
   227     009F                     	;# 
   228     010C                     	;# 
   229     010D                     	;# 
   230     010E                     	;# 
   231     010F                     	;# 
   232     018C                     	;# 
   233     018D                     	;# 
   234                           
   235                           	psect	idataCOMMON
   236     06FB                     __pidataCOMMON:
   237                           
   238                           ;initializer for print_msg@print_flag
   239     06FB  3401               	retlw	1
   240                           
   241                           ;initializer for cursor_on@cursor_flag
   242     06FC  3401               	retlw	1
   243     0008                     _PORTD	set	8
   244     0049                     _RE1	set	73
   245     004A                     _RE2	set	74
   246     0088                     _TRISD	set	136
   247     0449                     _TRISE1	set	1097
   248     044A                     _TRISE2	set	1098
   249                           
   250                           	psect	strings
   251     0003                     __pstrings:
   252     0003                     stringtab:
   253     0003                     __stringtab:
   254     0003                     stringcode:	
   255                           ;	String table - string pointers are 1 byte each
   256                           
   257     0003                     stringdir:
   258     0003  3000               	movlw	high stringdir
   259     0004  008A               	movwf	10
   260     0005  0804               	movf	4,w
   261     0006  0A84               	incf	4,f
   262     0007  0782               	addwf	2,f
   263     0008                     __stringbase:
   264     0008  3400               	retlw	0
   265     0009                     __end_of__stringtab:
   266     0009                     STR_1:
   267     0009  3450               	retlw	80	;'P'
   268     000A  3452               	retlw	82	;'R'
   269     000B  3449               	retlw	73	;'I'
   270     000C  344E               	retlw	78	;'N'
   271     000D  3454               	retlw	84	;'T'
   272     000E  3420               	retlw	32	;' '
   273     000F  3448               	retlw	72	;'H'
   274     0010  3445               	retlw	69	;'E'
   275     0011  3452               	retlw	82	;'R'
   276     0012  3445               	retlw	69	;'E'
   277     0013  3400               	retlw	0
   278                           
   279                           	psect	cinit
   280     07F0                     start_initialization:	
   281                           ; #config settings
   282                           
   283     07F0                     __initialization:
   284                           
   285                           ; Initialize objects allocated to COMMON
   286     07F0  120A  118A  26FB  120A  118A  	fcall	__pidataCOMMON	;fetch initializer
   287     07F5  00F7               	movwf	__pdataCOMMON& (0+127)
   288     07F6  120A  118A  26FC  120A  118A  	fcall	__pidataCOMMON+1	;fetch initializer
   289     07FB  00F8               	movwf	(__pdataCOMMON+1)& (0+127)
   290     07FC                     end_of_initialization:	
   291                           ;End of C runtime variable initialization code
   292                           
   293     07FC                     __end_of__initialization:
   294     07FC  0183               	clrf	3
   295     07FD  120A  118A  2F1D   	ljmp	_main	;jump to C main() function
   296                           
   297                           	psect	dataCOMMON
   298     0077                     __pdataCOMMON:
   299     0077                     print_msg@print_flag:
   300     0077                     	ds	1
   301     0078                     cursor_on@cursor_flag:
   302     0078                     	ds	1
   303                           
   304                           	psect	cstackCOMMON
   305     0070                     __pcstackCOMMON:
   306     0070                     ?_clcd_write:
   307     0070                     ?_init_display_controller:	
   308                           ; 1 bytes @ 0x0
   309                           
   310     0070                     ?_init_clcd:	
   311                           ; 1 bytes @ 0x0
   312                           
   313     0070                     ?_init_config:	
   314                           ; 1 bytes @ 0x0
   315                           
   316     0070                     ?_cursor_on:	
   317                           ; 1 bytes @ 0x0
   318                           
   319     0070                     ?_print_msg:	
   320                           ; 1 bytes @ 0x0
   321                           
   322     0070                     ?_main:	
   323                           ; 1 bytes @ 0x0
   324                           
   325     0070                     clcd_write@mode:	
   326                           ; 1 bytes @ 0x0
   327                           
   328                           
   329                           ; 1 bytes @ 0x0
   330     0070                     	ds	1
   331     0071                     ??_clcd_write:
   332                           
   333                           ; 1 bytes @ 0x1
   334     0071                     	ds	2
   335     0073                     clcd_write@byte:
   336                           
   337                           ; 1 bytes @ 0x3
   338     0073                     	ds	1
   339     0074                     ??_init_display_controller:
   340     0074                     ?_clcd_print:	
   341                           ; 1 bytes @ 0x4
   342                           
   343     0074                     ??_cursor_on:	
   344                           ; 1 bytes @ 0x4
   345                           
   346     0074                     clcd_print@addr:	
   347                           ; 1 bytes @ 0x4
   348                           
   349                           
   350                           ; 1 bytes @ 0x4
   351     0074                     	ds	1
   352     0075                     ??_clcd_print:
   353     0075                     cursor_on@cursor_pos:	
   354                           ; 1 bytes @ 0x5
   355                           
   356                           
   357                           ; 1 bytes @ 0x5
   358     0075                     	ds	1
   359     0076                     ??_init_clcd:
   360     0076                     ??_init_config:	
   361                           ; 1 bytes @ 0x6
   362                           
   363     0076                     clcd_print@str:	
   364                           ; 1 bytes @ 0x6
   365                           
   366                           
   367                           ; 1 bytes @ 0x6
   368     0076                     	ds	1
   369     0077                     ??_print_msg:
   370     0077                     ??_main:	
   371                           ; 1 bytes @ 0x7
   372                           
   373                           
   374                           	psect	maintext
   375     071D                     __pmaintext:	
   376                           ; 1 bytes @ 0x7
   377 ;;
   378 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   379 ;;
   380 ;; *************** function _main *****************
   381 ;; Defined at:
   382 ;;		line 57 in file "main.c"
   383 ;; Parameters:    Size  Location     Type
   384 ;;		None
   385 ;; Auto vars:     Size  Location     Type
   386 ;;		None
   387 ;; Return value:  Size  Location     Type
   388 ;;                  1    wreg      void 
   389 ;; Registers used:
   390 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   391 ;; Tracked objects:
   392 ;;		On entry : B00/0
   393 ;;		On exit  : 0/0
   394 ;;		Unchanged: 0/0
   395 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   396 ;;      Params:         0       0       0       0       0
   397 ;;      Locals:         0       0       0       0       0
   398 ;;      Temps:          0       0       0       0       0
   399 ;;      Totals:         0       0       0       0       0
   400 ;;Total ram usage:        0 bytes
   401 ;; Hardware stack levels required when called: 4
   402 ;; This function calls:
   403 ;;		_cursor_on
   404 ;;		_init_config
   405 ;;		_print_msg
   406 ;; This function is called by:
   407 ;;		Startup code after reset
   408 ;; This function uses a non-reentrant model
   409 ;;
   410                           
   411     071D                     _main:	
   412                           ;psect for function _main
   413                           
   414     071D                     l800:	
   415                           ;incstack = 0
   416                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   417                           
   418     071D  120A  118A  26FD  120A  118A  	fcall	_init_config
   419     0722                     l802:
   420     0722  120A  118A  270E  120A  118A  	fcall	_print_msg
   421     0727                     l804:
   422     0727  3084               	movlw	132
   423     0728  120A  118A  2751  120A  118A  	fcall	_cursor_on
   424     072D  2F22               	goto	l802
   425     072E  120A  118A  2800   	ljmp	start
   426     0731                     __end_of_main:
   427                           
   428                           	psect	text1
   429     070E                     __ptext1:	
   430 ;; *************** function _print_msg *****************
   431 ;; Defined at:
   432 ;;		line 46 in file "main.c"
   433 ;; Parameters:    Size  Location     Type
   434 ;;		None
   435 ;; Auto vars:     Size  Location     Type
   436 ;;		None
   437 ;; Return value:  Size  Location     Type
   438 ;;                  1    wreg      void 
   439 ;; Registers used:
   440 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   441 ;; Tracked objects:
   442 ;;		On entry : 0/0
   443 ;;		On exit  : 0/0
   444 ;;		Unchanged: 0/0
   445 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   446 ;;      Params:         0       0       0       0       0
   447 ;;      Locals:         0       0       0       0       0
   448 ;;      Temps:          0       0       0       0       0
   449 ;;      Totals:         0       0       0       0       0
   450 ;;Total ram usage:        0 bytes
   451 ;; Hardware stack levels used: 1
   452 ;; Hardware stack levels required when called: 2
   453 ;; This function calls:
   454 ;;		_clcd_print
   455 ;; This function is called by:
   456 ;;		_main
   457 ;; This function uses a non-reentrant model
   458 ;;
   459                           
   460     070E                     _print_msg:	
   461                           ;psect for function _print_msg
   462                           
   463     070E                     l788:	
   464                           ;incstack = 0
   465                           ; Regs used in _print_msg: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   466                           
   467                           
   468                           ;main.c: 48: ;main.c: 50:     while (1)
   469     070E  0377               	decf	print_msg@print_flag,w
   470     070F  1D03               	btfss	3,2
   471     0710  2F12               	goto	u101
   472     0711  2F13               	goto	u100
   473     0712                     u101:
   474     0712  2F1C               	goto	l58
   475     0713                     u100:
   476     0713                     l790:
   477                           
   478                           ;main.c: 51:     {;main.c: 52:         print_msg();
   479     0713  3080               	movlw	128
   480     0714  00F4               	movwf	clcd_print@addr
   481     0715  3001               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
   482     0716  120A  118A  2771  120A  118A  	fcall	_clcd_print
   483     071B                     l792:
   484                           
   485                           ;main.c: 53:         cursor_on((0x80 + 4));
   486     071B  01F7               	clrf	print_msg@print_flag
   487     071C                     l58:
   488     071C  0008               	return
   489     071D                     __end_of_print_msg:
   490                           
   491                           	psect	text2
   492     0771                     __ptext2:	
   493 ;; *************** function _clcd_print *****************
   494 ;; Defined at:
   495 ;;		line 55 in file "clcd.c"
   496 ;; Parameters:    Size  Location     Type
   497 ;;  str             1    wreg     PTR const unsigned char 
   498 ;;		 -> STR_1(11), 
   499 ;;  addr            1    4[COMMON] unsigned char 
   500 ;; Auto vars:     Size  Location     Type
   501 ;;  str             1    6[COMMON] PTR const unsigned char 
   502 ;;		 -> STR_1(11), 
   503 ;; Return value:  Size  Location     Type
   504 ;;                  1    wreg      void 
   505 ;; Registers used:
   506 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   507 ;; Tracked objects:
   508 ;;		On entry : 0/0
   509 ;;		On exit  : 0/0
   510 ;;		Unchanged: 0/0
   511 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   512 ;;      Params:         1       0       0       0       0
   513 ;;      Locals:         1       0       0       0       0
   514 ;;      Temps:          1       0       0       0       0
   515 ;;      Totals:         3       0       0       0       0
   516 ;;Total ram usage:        3 bytes
   517 ;; Hardware stack levels used: 1
   518 ;; Hardware stack levels required when called: 1
   519 ;; This function calls:
   520 ;;		_clcd_write
   521 ;; This function is called by:
   522 ;;		_print_msg
   523 ;; This function uses a non-reentrant model
   524 ;;
   525                           
   526     0771                     _clcd_print:	
   527                           ;psect for function _clcd_print
   528                           
   529                           
   530                           ;incstack = 0
   531                           ; Regs used in _clcd_print: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   532                           ;clcd_print@str stored from wreg
   533     0771  00F6               	movwf	clcd_print@str
   534     0772                     l768:
   535                           
   536                           ;clcd.c: 55: void clcd_print(const char *str, unsigned char addr);clcd.c: 56: {;clcd.c: 
      +                          57:     clcd_write(addr, 0);
   537     0772  01F0               	clrf	clcd_write@mode
   538     0773  0874               	movf	clcd_print@addr,w
   539     0774  120A  118A  2731  120A  118A  	fcall	_clcd_write
   540                           
   541                           ;clcd.c: 59:     while (*str != '\0')
   542     0779  2F8C               	goto	l774
   543     077A                     l770:
   544                           
   545                           ;clcd.c: 60:     {;clcd.c: 61:         clcd_write(*str, 1);
   546     077A  01F0               	clrf	clcd_write@mode
   547     077B  0AF0               	incf	clcd_write@mode,f
   548     077C  0876               	movf	clcd_print@str,w
   549     077D  0084               	movwf	4
   550     077E  120A  118A  2003  120A  118A  	fcall	stringdir
   551     0783  120A  118A  2731  120A  118A  	fcall	_clcd_write
   552     0788                     l772:
   553                           
   554                           ;clcd.c: 62:         str++;
   555     0788  3001               	movlw	1
   556     0789  00F5               	movwf	??_clcd_print
   557     078A  0875               	movf	??_clcd_print,w
   558     078B  07F6               	addwf	clcd_print@str,f
   559     078C                     l774:
   560                           
   561                           ;clcd.c: 59:     while (*str != '\0')
   562     078C  0876               	movf	clcd_print@str,w
   563     078D  0084               	movwf	4
   564     078E  120A  118A  2003  120A  118A  	fcall	stringdir
   565     0793  3A00               	xorlw	0
   566     0794  1D03               	skipz
   567     0795  2F97               	goto	u81
   568     0796  2F98               	goto	u80
   569     0797                     u81:
   570     0797  2F7A               	goto	l770
   571     0798                     u80:
   572     0798                     l32:
   573     0798  0008               	return
   574     0799                     __end_of_clcd_print:
   575                           
   576                           	psect	text3
   577     06FD                     __ptext3:	
   578 ;; *************** function _init_config *****************
   579 ;; Defined at:
   580 ;;		line 19 in file "main.c"
   581 ;; Parameters:    Size  Location     Type
   582 ;;		None
   583 ;; Auto vars:     Size  Location     Type
   584 ;;		None
   585 ;; Return value:  Size  Location     Type
   586 ;;                  1    wreg      void 
   587 ;; Registers used:
   588 ;;		wreg, status,2, status,0, pclath, cstack
   589 ;; Tracked objects:
   590 ;;		On entry : 0/0
   591 ;;		On exit  : 0/0
   592 ;;		Unchanged: 0/0
   593 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   594 ;;      Params:         0       0       0       0       0
   595 ;;      Locals:         0       0       0       0       0
   596 ;;      Temps:          0       0       0       0       0
   597 ;;      Totals:         0       0       0       0       0
   598 ;;Total ram usage:        0 bytes
   599 ;; Hardware stack levels used: 1
   600 ;; Hardware stack levels required when called: 3
   601 ;; This function calls:
   602 ;;		_init_clcd
   603 ;; This function is called by:
   604 ;;		_main
   605 ;; This function uses a non-reentrant model
   606 ;;
   607                           
   608     06FD                     _init_config:	
   609                           ;psect for function _init_config
   610                           
   611     06FD                     l776:	
   612                           ;incstack = 0
   613                           ; Regs used in _init_config: [wreg+status,2+status,0+pclath+cstack]
   614                           
   615                           
   616                           ;main.c: 21:         cursor_flag = 0;
   617     06FD  120A  118A  2703  120A  118A  	fcall	_init_clcd
   618     0702                     l43:
   619     0702  0008               	return
   620     0703                     __end_of_init_config:
   621                           
   622                           	psect	text4
   623     0703                     __ptext4:	
   624 ;; *************** function _init_clcd *****************
   625 ;; Defined at:
   626 ;;		line 37 in file "clcd.c"
   627 ;; Parameters:    Size  Location     Type
   628 ;;		None
   629 ;; Auto vars:     Size  Location     Type
   630 ;;		None
   631 ;; Return value:  Size  Location     Type
   632 ;;                  1    wreg      void 
   633 ;; Registers used:
   634 ;;		wreg, status,2, status,0, pclath, cstack
   635 ;; Tracked objects:
   636 ;;		On entry : 0/0
   637 ;;		On exit  : 0/0
   638 ;;		Unchanged: 0/0
   639 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   640 ;;      Params:         0       0       0       0       0
   641 ;;      Locals:         0       0       0       0       0
   642 ;;      Temps:          0       0       0       0       0
   643 ;;      Totals:         0       0       0       0       0
   644 ;;Total ram usage:        0 bytes
   645 ;; Hardware stack levels used: 1
   646 ;; Hardware stack levels required when called: 2
   647 ;; This function calls:
   648 ;;		_init_display_controller
   649 ;; This function is called by:
   650 ;;		_init_config
   651 ;; This function uses a non-reentrant model
   652 ;;
   653                           
   654     0703                     _init_clcd:	
   655                           ;psect for function _init_clcd
   656                           
   657     0703                     l760:	
   658                           ;incstack = 0
   659                           ; Regs used in _init_clcd: [wreg+status,2+status,0+pclath+cstack]
   660                           
   661                           
   662                           ;clcd.c: 40:     TRISD = 0x00;
   663     0703  1683               	bsf	3,5	;RP0=1, select bank1
   664     0704  1303               	bcf	3,6	;RP1=0, select bank1
   665     0705  0188               	clrf	8	;volatile
   666     0706                     l762:
   667                           
   668                           ;clcd.c: 43:     TRISE2 = 0;
   669     0706  1109               	bcf	9,2	;volatile
   670     0707                     l764:
   671                           
   672                           ;clcd.c: 44:     TRISE1 = 0;
   673     0707  1089               	bcf	9,1	;volatile
   674     0708                     l766:
   675                           
   676                           ;clcd.c: 46:     init_display_controller();
   677     0708  120A  118A  2799  120A  118A  	fcall	_init_display_controller
   678     070D                     l23:
   679     070D  0008               	return
   680     070E                     __end_of_init_clcd:
   681                           
   682                           	psect	text5
   683     0799                     __ptext5:	
   684 ;; *************** function _init_display_controller *****************
   685 ;; Defined at:
   686 ;;		line 16 in file "clcd.c"
   687 ;; Parameters:    Size  Location     Type
   688 ;;		None
   689 ;; Auto vars:     Size  Location     Type
   690 ;;		None
   691 ;; Return value:  Size  Location     Type
   692 ;;                  1    wreg      void 
   693 ;; Registers used:
   694 ;;		wreg, status,2, status,0, pclath, cstack
   695 ;; Tracked objects:
   696 ;;		On entry : 0/0
   697 ;;		On exit  : 0/0
   698 ;;		Unchanged: 0/0
   699 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   700 ;;      Params:         0       0       0       0       0
   701 ;;      Locals:         0       0       0       0       0
   702 ;;      Temps:          2       0       0       0       0
   703 ;;      Totals:         2       0       0       0       0
   704 ;;Total ram usage:        2 bytes
   705 ;; Hardware stack levels used: 1
   706 ;; Hardware stack levels required when called: 1
   707 ;; This function calls:
   708 ;;		_clcd_write
   709 ;; This function is called by:
   710 ;;		_init_clcd
   711 ;; This function uses a non-reentrant model
   712 ;;
   713                           
   714     0799                     _init_display_controller:	
   715                           ;psect for function _init_display_controller
   716                           
   717     0799                     l740:	
   718                           ;incstack = 0
   719                           ; Regs used in _init_display_controller: [wreg+status,2+status,0+pclath+cstack]
   720                           
   721                           
   722                           ;clcd.c: 19:     _delay((unsigned long)((30)*(20000000/4000.0)));
   723     0799  30C3               	movlw	195
   724     079A  00F5               	movwf	??_init_display_controller+1
   725     079B  30CD               	movlw	205
   726     079C  00F4               	movwf	??_init_display_controller
   727     079D                     u117:
   728     079D  0BF4               	decfsz	??_init_display_controller,f
   729     079E  2F9D               	goto	u117
   730     079F  0BF5               	decfsz	??_init_display_controller+1,f
   731     07A0  2F9D               	goto	u117
   732     07A1                     l742:
   733                           
   734                           ;clcd.c: 22:     clcd_write(0x33, 0);
   735     07A1  01F0               	clrf	clcd_write@mode
   736     07A2  3033               	movlw	51
   737     07A3  120A  118A  2731  120A  118A  	fcall	_clcd_write
   738     07A8                     l744:
   739                           
   740                           ;clcd.c: 23:     _delay((unsigned long)((4100)*(20000000/4000000.0)));
   741     07A8  301B               	movlw	27
   742     07A9  00F5               	movwf	??_init_display_controller+1
   743     07AA  309E               	movlw	158
   744     07AB  00F4               	movwf	??_init_display_controller
   745     07AC                     u127:
   746     07AC  0BF4               	decfsz	??_init_display_controller,f
   747     07AD  2FAC               	goto	u127
   748     07AE  0BF5               	decfsz	??_init_display_controller+1,f
   749     07AF  2FAC               	goto	u127
   750     07B0  0000               	nop
   751                           
   752                           ;clcd.c: 24:     clcd_write(0x33, 0);
   753     07B1  01F0               	clrf	clcd_write@mode
   754     07B2  3033               	movlw	51
   755     07B3  120A  118A  2731  120A  118A  	fcall	_clcd_write
   756     07B8                     l746:
   757                           
   758                           ;clcd.c: 25:     _delay((unsigned long)((100)*(20000000/4000000.0)));
   759     07B8  30A6               	movlw	166
   760     07B9  00F4               	movwf	??_init_display_controller
   761     07BA                     u137:
   762     07BA  0BF4               	decfsz	??_init_display_controller,f
   763     07BB  2FBA               	goto	u137
   764     07BC  0000               	nop
   765     07BD                     l748:
   766                           
   767                           ;clcd.c: 26:     clcd_write(0x33, 0);
   768     07BD  01F0               	clrf	clcd_write@mode
   769     07BE  3033               	movlw	51
   770     07BF  120A  118A  2731  120A  118A  	fcall	_clcd_write
   771     07C4                     l750:
   772                           
   773                           ;clcd.c: 27:     _delay((unsigned long)((1)*(20000000/4000000.0)));
   774     07C4  2FC5               	nop2	;2 cycle nop
   775     07C5  2FC6               	nop2	;2 cycle nop
   776     07C6  0000               	nop
   777     07C7                     l752:
   778                           
   779                           ;clcd.c: 29:     clcd_write(0x38, 0);
   780     07C7  01F0               	clrf	clcd_write@mode
   781     07C8  3038               	movlw	56
   782     07C9  120A  118A  2731  120A  118A  	fcall	_clcd_write
   783     07CE                     l754:
   784                           
   785                           ;clcd.c: 30:     _delay((unsigned long)((100)*(20000000/4000000.0)));
   786     07CE  30A6               	movlw	166
   787     07CF  00F4               	movwf	??_init_display_controller
   788     07D0                     u147:
   789     07D0  0BF4               	decfsz	??_init_display_controller,f
   790     07D1  2FD0               	goto	u147
   791     07D2  0000               	nop
   792                           
   793                           ;clcd.c: 31:     clcd_write(0x01, 0);
   794     07D3  01F0               	clrf	clcd_write@mode
   795     07D4  3001               	movlw	1
   796     07D5  120A  118A  2731  120A  118A  	fcall	_clcd_write
   797     07DA                     l756:
   798                           
   799                           ;clcd.c: 32:     _delay((unsigned long)((500)*(20000000/4000000.0)));
   800     07DA  3004               	movlw	4
   801     07DB  00F5               	movwf	??_init_display_controller+1
   802     07DC  303D               	movlw	61
   803     07DD  00F4               	movwf	??_init_display_controller
   804     07DE                     u157:
   805     07DE  0BF4               	decfsz	??_init_display_controller,f
   806     07DF  2FDE               	goto	u157
   807     07E0  0BF5               	decfsz	??_init_display_controller+1,f
   808     07E1  2FDE               	goto	u157
   809     07E2  2FE3               	nop2
   810     07E3                     l758:
   811                           
   812                           ;clcd.c: 33:     clcd_write(0x0C, 0);
   813     07E3  01F0               	clrf	clcd_write@mode
   814     07E4  300C               	movlw	12
   815     07E5  120A  118A  2731  120A  118A  	fcall	_clcd_write
   816                           
   817                           ;clcd.c: 34:     _delay((unsigned long)((100)*(20000000/4000000.0)));
   818     07EA  30A6               	movlw	166
   819     07EB  00F4               	movwf	??_init_display_controller
   820     07EC                     u167:
   821     07EC  0BF4               	decfsz	??_init_display_controller,f
   822     07ED  2FEC               	goto	u167
   823     07EE  0000               	nop
   824     07EF                     l20:
   825     07EF  0008               	return
   826     07F0                     __end_of_init_display_controller:
   827                           
   828                           	psect	text6
   829     0751                     __ptext6:	
   830 ;; *************** function _cursor_on *****************
   831 ;; Defined at:
   832 ;;		line 24 in file "main.c"
   833 ;; Parameters:    Size  Location     Type
   834 ;;  cursor_pos      1    wreg     unsigned char 
   835 ;; Auto vars:     Size  Location     Type
   836 ;;  cursor_pos      1    5[COMMON] unsigned char 
   837 ;; Return value:  Size  Location     Type
   838 ;;                  1    wreg      void 
   839 ;; Registers used:
   840 ;;		wreg, status,2, status,0, pclath, cstack
   841 ;; Tracked objects:
   842 ;;		On entry : 0/0
   843 ;;		On exit  : 0/0
   844 ;;		Unchanged: 0/0
   845 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   846 ;;      Params:         0       0       0       0       0
   847 ;;      Locals:         1       0       0       0       0
   848 ;;      Temps:          1       0       0       0       0
   849 ;;      Totals:         2       0       0       0       0
   850 ;;Total ram usage:        2 bytes
   851 ;; Hardware stack levels used: 1
   852 ;; Hardware stack levels required when called: 1
   853 ;; This function calls:
   854 ;;		_clcd_write
   855 ;; This function is called by:
   856 ;;		_main
   857 ;; This function uses a non-reentrant model
   858 ;;
   859                           
   860     0751                     _cursor_on:	
   861                           ;psect for function _cursor_on
   862                           
   863                           
   864                           ;incstack = 0
   865                           ; Regs used in _cursor_on: [wreg+status,2+status,0+pclath+cstack]
   866                           ;cursor_on@cursor_pos stored from wreg
   867     0751  00F5               	movwf	cursor_on@cursor_pos
   868     0752                     l778:
   869                           
   870                           ;main.c: 24: ;main.c: 25: void cursor_off(void);main.c: 26: {;main.c: 28:     _delay((un
      +                          signed long)((100)*(20000000/4000000.0)));
   871     0752  0378               	decf	cursor_on@cursor_flag,w
   872     0753  1D03               	btfss	3,2
   873     0754  2F56               	goto	u91
   874     0755  2F57               	goto	u90
   875     0756                     u91:
   876     0756  2F70               	goto	l49
   877     0757                     u90:
   878     0757                     l780:
   879                           
   880                           ;main.c: 29: };main.c: 30: 
   881     0757  01F0               	clrf	clcd_write@mode
   882     0758  0875               	movf	cursor_on@cursor_pos,w
   883     0759  120A  118A  2731  120A  118A  	fcall	_clcd_write
   884     075E                     l782:
   885                           
   886                           ;main.c: 31: void print_msg(void)
   887     075E  30A6               	movlw	166
   888     075F  00F4               	movwf	??_cursor_on
   889     0760                     u177:
   890     0760  0BF4               	decfsz	??_cursor_on,f
   891     0761  2F60               	goto	u177
   892     0762  0000               	nop
   893     0763                     l784:
   894                           
   895                           ;main.c: 33:     static unsigned char print_flag = 1;
   896     0763  01F0               	clrf	clcd_write@mode
   897     0764  300F               	movlw	15
   898     0765  120A  118A  2731  120A  118A  	fcall	_clcd_write
   899                           
   900                           ;main.c: 34: 
   901     076A  30A6               	movlw	166
   902     076B  00F4               	movwf	??_cursor_on
   903     076C                     u187:
   904     076C  0BF4               	decfsz	??_cursor_on,f
   905     076D  2F6C               	goto	u187
   906     076E  0000               	nop
   907     076F                     l786:
   908                           
   909                           ;main.c: 36:     {
   910     076F  01F8               	clrf	cursor_on@cursor_flag
   911     0770                     l49:
   912     0770  0008               	return
   913     0771                     __end_of_cursor_on:
   914                           
   915                           	psect	text7
   916     0731                     __ptext7:	
   917 ;; *************** function _clcd_write *****************
   918 ;; Defined at:
   919 ;;		line 4 in file "clcd.c"
   920 ;; Parameters:    Size  Location     Type
   921 ;;  byte            1    wreg     unsigned char 
   922 ;;  mode            1    0[COMMON] unsigned char 
   923 ;; Auto vars:     Size  Location     Type
   924 ;;  byte            1    3[COMMON] unsigned char 
   925 ;; Return value:  Size  Location     Type
   926 ;;                  1    wreg      void 
   927 ;; Registers used:
   928 ;;		wreg
   929 ;; Tracked objects:
   930 ;;		On entry : 0/0
   931 ;;		On exit  : 0/0
   932 ;;		Unchanged: 0/0
   933 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   934 ;;      Params:         1       0       0       0       0
   935 ;;      Locals:         1       0       0       0       0
   936 ;;      Temps:          2       0       0       0       0
   937 ;;      Totals:         4       0       0       0       0
   938 ;;Total ram usage:        4 bytes
   939 ;; Hardware stack levels used: 1
   940 ;; This function calls:
   941 ;;		Nothing
   942 ;; This function is called by:
   943 ;;		_init_display_controller
   944 ;;		_clcd_print
   945 ;;		_cursor_on
   946 ;;		_clcd_putch
   947 ;;		_cursor_off
   948 ;; This function uses a non-reentrant model
   949 ;;
   950                           
   951     0731                     _clcd_write:	
   952                           ;psect for function _clcd_write
   953                           
   954                           
   955                           ;incstack = 0
   956                           ; Regs used in _clcd_write: [wreg]
   957                           ;clcd_write@byte stored from wreg
   958     0731  00F3               	movwf	clcd_write@byte
   959     0732                     l732:
   960                           
   961                           ;clcd.c: 4:            void clcd_write(unsigned char byte, unsigned char mode);clcd.c: 5
      +                          : {;clcd.c: 6:     RE2 = (__bit) mode;
   962     0732  1870               	btfsc	clcd_write@mode,0
   963     0733  2F35               	goto	u61
   964     0734  2F39               	goto	u60
   965     0735                     u61:
   966     0735  1283               	bcf	3,5	;RP0=0, select bank0
   967     0736  1303               	bcf	3,6	;RP1=0, select bank0
   968     0737  1509               	bsf	9,2	;volatile
   969     0738  2F3C               	goto	u74
   970     0739                     u60:
   971     0739  1283               	bcf	3,5	;RP0=0, select bank0
   972     073A  1303               	bcf	3,6	;RP1=0, select bank0
   973     073B  1109               	bcf	9,2	;volatile
   974     073C                     u74:
   975     073C                     l734:
   976                           
   977                           ;clcd.c: 7:     PORTD = byte;
   978     073C  0873               	movf	clcd_write@byte,w
   979     073D  0088               	movwf	8	;volatile
   980     073E                     l736:
   981                           
   982                           ;clcd.c: 9:     RE1 = 1;
   983     073E  1489               	bsf	9,1	;volatile
   984                           
   985                           ;clcd.c: 10:     _delay((unsigned long)((100)*(20000000/4000000.0)));
   986     073F  30A6               	movlw	166
   987     0740  00F1               	movwf	??_clcd_write
   988     0741                     u197:
   989     0741  0BF1               	decfsz	??_clcd_write,f
   990     0742  2F41               	goto	u197
   991     0743  0000               	nop
   992     0744                     l738:
   993                           
   994                           ;clcd.c: 11:     RE1 = 0;
   995     0744  1283               	bcf	3,5	;RP0=0, select bank0
   996     0745  1303               	bcf	3,6	;RP1=0, select bank0
   997     0746  1089               	bcf	9,1	;volatile
   998                           
   999                           ;clcd.c: 13:     _delay((unsigned long)((4100)*(20000000/4000000.0)));
  1000     0747  301B               	movlw	27
  1001     0748  00F2               	movwf	??_clcd_write+1
  1002     0749  309E               	movlw	158
  1003     074A  00F1               	movwf	??_clcd_write
  1004     074B                     u207:
  1005     074B  0BF1               	decfsz	??_clcd_write,f
  1006     074C  2F4B               	goto	u207
  1007     074D  0BF2               	decfsz	??_clcd_write+1,f
  1008     074E  2F4B               	goto	u207
  1009     074F  0000               	nop
  1010     0750                     l17:
  1011     0750  0008               	return
  1012     0751                     __end_of_clcd_write:
  1013     007E                     btemp	set	126	;btemp
  1014     007E                     wtemp0	set	126
  1015                           
  1016                           	psect	config
  1017                           
  1018                           ;Config register CONFIG @ 0x2007
  1019                           ;	Oscillator Selection bits
  1020                           ;	FOSC = 0x3, unprogrammed default
  1021                           ;	Watchdog Timer Enable bit
  1022                           ;	WDTE = OFF, WDT disabled
  1023                           ;	Power-up Timer Enable bit
  1024                           ;	PWRTE = 0x1, unprogrammed default
  1025                           ;	Brown-out Reset Enable bit
  1026                           ;	BOREN = 0x1, unprogrammed default
  1027                           ;	Low-Voltage (Single-Supply) In-Circuit Serial Programming Enable bit
  1028                           ;	LVP = 0x1, unprogrammed default
  1029                           ;	Data EEPROM Memory Code Protection bit
  1030                           ;	CPD = 0x1, unprogrammed default
  1031                           ;	Flash Program Memory Write Enable bits
  1032                           ;	WRT = 0x3, unprogrammed default
  1033                           ;	In-Circuit Debugger Mode bit
  1034                           ;	DEBUG = 0x1, unprogrammed default
  1035                           ;	Flash Program Memory Code Protection bit
  1036                           ;	CP = 0x1, unprogrammed default
  1037     2007                     	org	8199
  1038     2007  3FFB               	dw	16379

Data Sizes:
    Strings     11
    Constant    0
    Data        2
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      7       9
    BANK0            80      0       0
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    clcd_print@str	PTR const unsigned char  size(1) Largest target is 11
		 -> STR_1(CODE[11]), 


Critical Paths under _main in COMMON

    _print_msg->_clcd_print
    _clcd_print->_clcd_write
    _init_clcd->_init_display_controller
    _init_display_controller->_clcd_write
    _cursor_on->_clcd_write

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0    3294
                          _cursor_on
                        _init_config
                          _print_msg
 ---------------------------------------------------------------------------------
 (1) _print_msg                                            0     0      0    1208
                         _clcd_print
 ---------------------------------------------------------------------------------
 (2) _clcd_print                                           3     2      1    1208
                                              4 COMMON     3     2      1
                         _clcd_write
 ---------------------------------------------------------------------------------
 (1) _init_config                                          0     0      0    1032
                          _init_clcd
 ---------------------------------------------------------------------------------
 (2) _init_clcd                                            0     0      0    1032
            _init_display_controller
 ---------------------------------------------------------------------------------
 (3) _init_display_controller                              2     2      0    1032
                                              4 COMMON     2     2      0
                         _clcd_write
 ---------------------------------------------------------------------------------
 (1) _cursor_on                                            2     2      0    1054
                                              4 COMMON     2     2      0
                         _clcd_write
 ---------------------------------------------------------------------------------
 (3) _clcd_write                                           4     3      1    1032
                                              0 COMMON     4     3      1
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _cursor_on
     _clcd_write
   _init_config
     _init_clcd
       _init_display_controller
         _clcd_write
   _print_msg
     _clcd_print
       _clcd_write

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60      0       0       9        0.0%
BITBANK3            60      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60      0       0      11        0.0%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50      0       0       7        0.0%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50      0       0       5        0.0%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      7       9       1       64.3%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0       9      12        0.0%
ABS                  0      0       9       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V2.40 build 20220703182018 
Symbol Table                                                                                   Wed Oct 12 23:53:50 2022

                              pc 0002                   clcd_print@addr 0074                               l20 07EF  
                             l23 070D                               l32 0798                               l17 0750  
                             l43 0702                               l49 0770                               l58 071C  
                             u60 0739                               u61 0735                               u80 0798  
                             u81 0797                               u74 073C                               u90 0757  
                             u91 0756                               fsr 0004                              l800 071D  
                            l802 0722                              l732 0732                              l740 0799  
                            l804 0727                              l734 073C                              l750 07C4  
                            l742 07A1                              l736 073E                              l752 07C7  
                            l744 07A8                              l760 0703                              l738 0744  
                            l754 07CE                              l746 07B8                              l762 0706  
                            l770 077A                              l780 0757                              l756 07DA  
                            l748 07BD                              l764 0707                              l772 0788  
                            l782 075E                              l758 07E3                              l766 0708  
                            l774 078C                              l790 0713                              l784 0763  
                            l776 06FD                              l768 0772                              l792 071B  
                            l786 076F                              l778 0752                              l788 070E  
                            _RE1 0049                              u100 0713                              _RE2 004A  
                            u101 0712                              u117 079D                              u207 074B  
                            u127 07AC                              u137 07BA                              u147 07D0  
                            u157 07DE                              u167 07EC                              u177 0760  
                            u187 076C                              u197 0741                              fsr0 0004  
                           STR_1 0009                             _main 071D                             btemp 007E  
                           start 0000                   clcd_write@byte 0073                   clcd_write@mode 0070  
                          ?_main 0070                     ?_init_config 0070                            _PORTD 0008  
                          _TRISD 0088                            pclath 000A                            status 0003  
                          wtemp0 007E                  __initialization 07F0                     __end_of_main 0731  
                         ??_main 0077                           _TRISE1 0449                           _TRISE2 044A  
        _init_display_controller 0799                     __pdataCOMMON 0077          __end_of__initialization 07FC  
                 __pcstackCOMMON 0070             cursor_on@cursor_flag 0078        ??_init_display_controller 0074  
                     _clcd_print 0771                       _clcd_write 0731                       __pmaintext 071D  
                     __stringtab 0003                          __ptext1 070E                          __ptext2 0771  
                        __ptext3 06FD                          __ptext4 0703                          __ptext5 0799  
                        __ptext6 0751                          __ptext7 0731  __end_of_init_display_controller 07F0  
              __end_of_init_clcd 070E                __end_of_cursor_on 0771             end_of_initialization 07FC  
                    ?_clcd_print 0074                      ?_clcd_write 0070                __end_of_print_msg 071D  
                  clcd_print@str 0076                    __pidataCOMMON 06FB              start_initialization 07F0  
                  ??_init_config 0076                        ___latbits 0002              cursor_on@cursor_pos 0075  
                      __pstrings 0003                        _init_clcd 0703              __end_of_init_config 0703  
                      _cursor_on 0751         ?_init_display_controller 0070                     ??_clcd_print 0075  
                   ??_clcd_write 0071                        _print_msg 070E                      __stringbase 0008  
             __end_of_clcd_print 0799               __end_of_clcd_write 0751                       ?_init_clcd 0070  
                     ?_cursor_on 0070                       ?_print_msg 0070               __end_of__stringtab 0009  
                    _init_config 06FD                      ??_init_clcd 0076                      ??_cursor_on 0074  
                      stringcode 0003                      ??_print_msg 0077              print_msg@print_flag 0077  
                       stringdir 0003                         stringtab 0003  
